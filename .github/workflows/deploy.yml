name: Deploy URL Shortener

on:
  push:
    branches: [main]
    #will add this part in case someone else will be working on the project
  # pull_request:
  #   branches: [main]
  workflow_dispatch:  # Allow manual trigger

env:
  AWS_REGION: us-east-1

jobs:
  # Job 1: Test the Lambda code
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install boto3

      - name: Run Python syntax check
        working-directory: ./backend
        run: |
          python -m py_compile lambda_function.py
          python -m py_compile handlers/create_handler.py
          python -m py_compile handlers/redirect_handler.py

      - name: Send test metrics to CloudWatch
        if: always()
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws cloudwatch put-metric-data \
            --region ${{ env.AWS_REGION }} \
            --namespace "CICD/Testing" \
            --metric-data '[
              {
                "MetricName": "TestStatus",
                "Value": ${{ job.status == 'success' && '1' || '0' }},
                "Unit": "Count",
                "Dimensions": [
                  {"Name": "Repository", "Value": "${{ github.repository }}"},
                  {"Name": "Developer", "Value": "${{ github.actor }}"}
                ]
              }
            ]'

  # Job 2: Terraform Plan
  terraform-plan:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: test
    if: needs.test.result == 'success'
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Format Check
        working-directory: ./terraform
        run: terraform fmt -check

      - name: Terraform Validate
        working-directory: ./terraform
        run: terraform validate

      - name: Terraform Plan
        id: tf-plan
        working-directory: ./terraform
        env:
          TF_VAR_role_arn: ${{ secrets.ROLE_ARN }}
        run: |
          export exitcode=0
          terraform plan -var-file="terraform.tfvars.ci" -detailed-exitcode -no-color -out tfplan || export exitcode=$?
          
          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
          
          if [ $exitcode -eq 1 ]; then
            echo Terraform Plan Failed!
            exit 1
          elif [ $exitcode -eq 2 ]; then
            echo Terraform Plan has changes
          else
            echo No Terraform changes
          fi

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: terraform/tfplan

  # Job 3: Deploy Infrastructure (only on main branch)
  deploy-infrastructure:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: terraform-plan
    if: github.ref == 'refs/heads/main' && needs.terraform-plan.outputs.tfplanExitCode == 2
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: terraform/

      - name: Start deployment timer
        id: deploy-timer
        run: echo "start_time=$(date +%s)" >> $GITHUB_OUTPUT

      - name: Terraform Apply
        id: terraform
        working-directory: ./terraform
        env:
          TF_VAR_role_arn: ${{ secrets.ROLE_ARN }}
        run: |
          terraform apply -auto-approve tfplan
          echo "status=success" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Calculate deployment duration
        if: always()
        run: |
          end_time=$(date +%s)
          duration=$((end_time - ${{ steps.deploy-timer.outputs.start_time }}))
          echo "duration=$duration" >> $GITHUB_OUTPUT

      - name: Send deployment metrics to CloudWatch
        if: always()
        run: |
          aws cloudwatch put-metric-data \
            --region ${{ env.AWS_REGION }} \
            --namespace "CICD/Deployment" \
            --metric-data '[
              {
                "MetricName": "DeploymentDuration",
                "Value": ${{ steps.deploy-timer.outputs.duration }},
                "Unit": "Seconds",
                "Dimensions": [
                  {"Name": "Repository", "Value": "${{ github.repository }}"},
                  {"Name": "Developer", "Value": "${{ github.actor }}"}
                ]
              },
              {
                "MetricName": "DeploymentStatus",
                "Value": ${{ steps.terraform.outputs.status == 'success' && '1' || '0' }},
                "Unit": "Count",
                "Dimensions": [
                  {"Name": "Repository", "Value": "${{ github.repository }}"},
                  {"Name": "Developer", "Value": "${{ github.actor }}"}
                ]
              }
            ]'

  # Job 4: Deploy Frontend (only on main branch)
  deploy-frontend:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [terraform-plan, deploy-infrastructure]
    if: always() && github.ref == 'refs/heads/main' && (needs.deploy-infrastructure.result == 'success' || needs.deploy-infrastructure.result == 'skipped')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get S3 bucket name from terraform.tfvars.ci
        id: get-bucket
        run: |
          bucket_name=$(grep "bucket_name" terraform/terraform.tfvars.ci | cut -d'"' -f2 | tr -d ' ')
          if [ -z "$bucket_name" ]; then
            bucket_name=$(awk -F'=' '/bucket_name/ {gsub(/[ "]/, "", $2); print $2}' terraform/terraform.tfvars.ci)
          fi
          if [ -z "$bucket_name" ]; then
            echo "ERROR: Could not extract bucket_name from terraform.tfvars.ci"
            cat terraform/terraform.tfvars.ci
            exit 1
          fi
          echo "bucket_name=$bucket_name" >> $GITHUB_OUTPUT
          echo "Using bucket: $bucket_name"

      - name: Sync frontend to S3
        run: |
          aws s3 sync ./frontend/ s3://${{ steps.get-bucket.outputs.bucket_name }}/ \
            --delete \
            --exclude "*.template.js"

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"

      - name: Send frontend deployment metrics
        run: |
          aws cloudwatch put-metric-data \
            --region ${{ env.AWS_REGION }} \
            --namespace "CICD/Frontend" \
            --metric-data '[
              {
                "MetricName": "FrontendDeployment",
                "Value": 1,
                "Unit": "Count",
                "Dimensions": [
                  {"Name": "Repository", "Value": "${{ github.repository }}"},
                  {"Name": "Developer", "Value": "${{ github.actor }}"}
                ]
              }
            ]'

  # Job 5: Notify on completion
  notify:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [test, deploy-infrastructure, deploy-frontend]
    if: always()
    
    steps:
      - name: Send completion metrics
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          success_count=0
          if [ "${{ needs.test.result }}" == "success" ]; then success_count=$((success_count + 1)); fi
          if [ "${{ needs.deploy-infrastructure.result }}" == "success" ] || [ "${{ needs.deploy-infrastructure.result }}" == "skipped" ]; then success_count=$((success_count + 1)); fi
          if [ "${{ needs.deploy-frontend.result }}" == "success" ]; then success_count=$((success_count + 1)); fi
          
          aws cloudwatch put-metric-data \
            --region ${{ env.AWS_REGION }} \
            --namespace "CICD/Pipeline" \
            --metric-data '[
              {
                "MetricName": "PipelineSuccess",
                "Value": '$success_count',
                "Unit": "Count",
                "Dimensions": [
                  {"Name": "Repository", "Value": "${{ github.repository }}"},
                  {"Name": "Developer", "Value": "${{ github.actor }}"}
                ]
              },
              {
                "MetricName": "PipelineExecution",
                "Value": 1,
                "Unit": "Count",
                "Dimensions": [
                  {"Name": "Repository", "Value": "${{ github.repository }}"}
                ]
              }
            ]'
      - name: Send detailed deployment metrics
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          # Calculate detailed metrics
          test_success=0
          infra_success=0
          frontend_success=0
          total_failed=0
          
          if [ "${{ needs.test.result }}" == "success" ]; then test_success=1; else total_failed=$((total_failed + 1)); fi
          if [ "${{ needs.deploy-infrastructure.result }}" == "success" ] || [ "${{ needs.deploy-infrastructure.result }}" == "skipped" ]; then infra_success=1; else total_failed=$((total_failed + 1)); fi
          if [ "${{ needs.deploy-frontend.result }}" == "success" ]; then frontend_success=1; else total_failed=$((total_failed + 1)); fi
          
          # Overall deployment status
          if [ $total_failed -eq 0 ]; then
            deployment_success=1
            deployment_failure=0
          else
            deployment_success=0
            deployment_failure=1
          fi
          
          echo "Deployment Success: $deployment_success"
          echo "Deployment Failure: $deployment_failure"
          echo "Total Failed Steps: $total_failed"
          
          # Send comprehensive metrics
          aws cloudwatch put-metric-data \
            --region ${{ env.AWS_REGION }} \
            --namespace "CICD/Pipeline" \
            --metric-data MetricName=DeploymentSuccess,Value=$deployment_success,Unit=Count,Dimensions=Name=Repository,Value=${{ github.repository }}
          
          aws cloudwatch put-metric-data \
            --region ${{ env.AWS_REGION }} \
            --namespace "CICD/Pipeline" \
            --metric-data MetricName=DeploymentFailure,Value=$deployment_failure,Unit=Count,Dimensions=Name=Repository,Value=${{ github.repository }}
          
          aws cloudwatch put-metric-data \
            --region ${{ env.AWS_REGION }} \
            --namespace "CICD/Pipeline" \
            --metric-data MetricName=TestSuccess,Value=$test_success,Unit=Count,Dimensions=Name=Repository,Value=${{ github.repository }}
          
          aws cloudwatch put-metric-data \
            --region ${{ env.AWS_REGION }} \
            --namespace "CICD/Pipeline" \
            --metric-data MetricName=InfrastructureSuccess,Value=$infra_success,Unit=Count,Dimensions=Name=Repository,Value=${{ github.repository }}
          
          aws cloudwatch put-metric-data \
            --region ${{ env.AWS_REGION }} \
            --namespace "CICD/Pipeline" \
            --metric-data MetricName=FrontendSuccess,Value=$frontend_success,Unit=Count,Dimensions=Name=Repository,Value=${{ github.repository }}